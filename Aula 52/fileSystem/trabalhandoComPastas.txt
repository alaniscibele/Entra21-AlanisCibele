1- Crie um script que irá salvar as informações de memória a cada 5 segundos em um arquivo chamado log.txt


const { EOL } = require("os");
const os = require("os");
const fsPromises = require("fs/promises");
const path = require("path");

setInterval(async () => {
    const freeMemory = parseInt(os.freemem() / 1024 / 1024),
          totalMemory = parseInt(os.totalmem() / 1024 / 1024),
          usage = parseInt((freeMemory * 100) / totalMemory);
    
    const content = {
        freeMemory: `${freeMemory} MB`,
        totalMemory: `${totalMemory} MB`,
        usage: `${usage} %`
    }

    const contentInJSON = JSON.stringify(content) + EOL;

    try {
        await fsPromises.appendFile(path.resolve(__dirname, "log.txt"), contentInJSON);
        console.log("Log adicionado");
    } catch(err) {
        console.log(err.message);
    }
}, 5000);



-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2- Crie um script que leia o arquivo exercioNomes.txt e mostra todos os nomes que começam com a letra A
presentes no arquivo.

Obs.: Nome e sobrenome.



const path = require("path");
const fsPromises = require("fs/promises");
const { EOL } = require("os");
(async () => {
    try {   
        const data = await fsPromises.readFile(path.resolve(__dirname, "exercicioNomes.txt"));
        const nomes = data.toString("utf-8").split(EOL);
        const nomesComA = nomes.filter(nome => nome[0].toUpperCase() === "A");
        console.log(nomesComA);
    } catch (err) {
        console.log(err.message);
    }
})();

------------------------------------------------------------------------------------------------------------------------------------------------------------------

3- Crie uma função getUserByName(name) que retorne o usuário obtido através do arquivo "users.json". Caso o usuário
não exista a função deve retornar undefined.

Se o usuário existir mostrar as informações do usuário no seguinte formato:
Usuário encontrado: 
nome: [nome do usuário]
idade: [idade do usuário]
email: [email do usuário]

Caso o usuário não existir mostrar a mensagem: "Usuário não foi encontrado."



const fsPromises = require("fs/promises");
const path = require("path");

async function getUserByName(name) {
    try {
        const data = await fsPromises.readFile(path.resolve(__dirname, "users.json"));
        const users = JSON.parse(data.toString("utf-8"));
        
        const user = users.find(user => user.nome === name);

        return user
    } catch (err) {
        console.log(err.message);
    }
}

(async () => {
    const user = await getUserByName("Pedr");

    if (user) {
        console.log(`Usuário encontrado:\nnome: ${user.nome}\nidade: ${user.idade}\nemail: ${user.email}`);
    } else {
        console.log("Usuário não foi encontrado!");
    }
})();
------------------------------------------------------------------------------------------------------------------------------------------------------------------

4- Faça um script que leia o arquivo exercioNomes.txt e utilize a biblioteca chalk (https://www.npmjs.com/package/chalk) para
mostrar os nomes que começam com a letra A em vermelho, os nomes que começam com a letra C em azul e os
nomes que começam com a letra D em magenta.


const fs = require("fs");
const fsPromises = require("fs/promises");
const path = require("path");
 
(async () => {
    const nomeNovaPasta = path.resolve(__dirname, "novaPasta");
    try {
        await fsPromises.mkdir(nomeNovaPasta, { recursive: true });
    } catch (err) {
        console.log(err.message);
    }    
})();
 
function obterArquivos(path){
    const nomePasta = path.resolve(__dirname, "novaPasta");
fs.readdir(nomePasta, (err, files) => {
    if (err) {
        return console.log(err.message);
    }
});
}
obterArquivos(path)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
